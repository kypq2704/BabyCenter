//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `baseline_save_black`.
    static let baseline_save_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_save_black")
    /// Image `baseline_today_black_24pt`.
    static let baseline_today_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_today_black_24pt")
    /// Image `bg_baby_setting`.
    static let bg_baby_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_baby_setting")
    /// Image `bg_today`.
    static let bg_today = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_today")
    /// Image `ic_appointment`.
    static let ic_appointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_appointment")
    /// Image `ic_baby_black`.
    static let ic_baby_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_baby_black")
    /// Image `ic_baby`.
    static let ic_baby = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_baby")
    /// Image `ic_body`.
    static let ic_body = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_body")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_description`.
    static let ic_description = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_description")
    /// Image `ic_guild`.
    static let ic_guild = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_guild")
    /// Image `ic_music`.
    static let ic_music = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_music")
    /// Image `ic_name`.
    static let ic_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_name")
    /// Image `ic_photo`.
    static let ic_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_photo")
    /// Image `ic_pregnancy`.
    static let ic_pregnancy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pregnancy")
    /// Image `ic_setting`.
    static let ic_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting")
    /// Image `ic_video`.
    static let ic_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video")
    /// Image `ic_weight`.
    static let ic_weight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_weight")
    /// Image `ic_yoga`.
    static let ic_yoga = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_yoga")
    
    /// `UIImage(named: "baseline_save_black", bundle: ..., traitCollection: ...)`
    static func baseline_save_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_save_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "baseline_today_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_today_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_today_black_24pt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_baby_setting", bundle: ..., traitCollection: ...)`
    static func bg_baby_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_baby_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_today", bundle: ..., traitCollection: ...)`
    static func bg_today(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_today, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_appointment", bundle: ..., traitCollection: ...)`
    static func ic_appointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_appointment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_baby", bundle: ..., traitCollection: ...)`
    static func ic_baby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_baby, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_baby_black", bundle: ..., traitCollection: ...)`
    static func ic_baby_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_baby_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_body", bundle: ..., traitCollection: ...)`
    static func ic_body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_body, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_description", bundle: ..., traitCollection: ...)`
    static func ic_description(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_description, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_guild", bundle: ..., traitCollection: ...)`
    static func ic_guild(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_guild, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_music", bundle: ..., traitCollection: ...)`
    static func ic_music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_music, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_name", bundle: ..., traitCollection: ...)`
    static func ic_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_photo", bundle: ..., traitCollection: ...)`
    static func ic_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pregnancy", bundle: ..., traitCollection: ...)`
    static func ic_pregnancy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pregnancy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video", bundle: ..., traitCollection: ...)`
    static func ic_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_weight", bundle: ..., traitCollection: ...)`
    static func ic_weight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_weight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_yoga", bundle: ..., traitCollection: ...)`
    static func ic_yoga(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_yoga, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BabyVideoTableViewCell`.
    static let babyVideoTableViewCell: Rswift.ReuseIdentifier<BabyVideoTableViewCell> = Rswift.ReuseIdentifier(identifier: "BabyVideoTableViewCell")
    /// Reuse identifier `babycell`.
    static let babycell: Rswift.ReuseIdentifier<BabyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "babycell")
    /// Reuse identifier `mecell`.
    static let mecell: Rswift.ReuseIdentifier<MeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "mecell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Baby`.
    static let baby = _R.storyboard.baby()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `Today`.
    static let today = _R.storyboard.today()
    
    /// `UIStoryboard(name: "Baby", bundle: ...)`
    static func baby(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.baby)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "Today", bundle: ...)`
    static func today(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.today)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try today.validate()
      try baby.validate()
      try me.validate()
      try setting.validate()
    }
    
    struct baby: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Baby"
      let videoViewController = StoryboardViewControllerResource<VideoViewController>(identifier: "VideoViewController")
      
      func videoViewController(_: Void = ()) -> VideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_description") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_description' is used in storyboard 'Baby', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_baby_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_baby_black' is used in storyboard 'Baby', but couldn't be loaded.") }
        if _R.storyboard.baby().videoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoViewController' could not be loaded from storyboard 'Baby' as 'VideoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "baseline_today_black_24pt") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_today_black_24pt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_baby_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_baby_black' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct me: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Me"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_description") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_description' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pregnancy") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pregnancy' is used in storyboard 'Me', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Setting"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting' is used in storyboard 'Setting', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct today: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let babySettingViewController = StoryboardViewControllerResource<BabySettingViewController>(identifier: "BabySettingViewController")
      let bundle = R.hostingBundle
      let name = "Today"
      
      func babySettingViewController(_: Void = ()) -> BabySettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: babySettingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "baseline_save_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_save_black' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_description") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_description' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "baseline_today_black_24pt") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_today_black_24pt' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_baby") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_baby' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_today") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_today' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_photo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_photo' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_baby_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_baby_black' is used in storyboard 'Today', but couldn't be loaded.") }
        if _R.storyboard.today().babySettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'babySettingViewController' could not be loaded from storyboard 'Today' as 'BabySettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
